'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _baseModel = require('./base-model');

var _baseModel2 = _interopRequireDefault(_baseModel);

var _setGuidFor = require('../metal/set-guid-for');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var CartLineItem = _baseModel2['default'].extend(Object.defineProperties({
  constructor: function constructor() {
    this['super'].apply(this, arguments);
  }
}, {
  id: {
    get: function get() {
      return this.attrs[_setGuidFor.GUID_KEY];
    },
    configurable: true,
    enumerable: true
  },
  variant_id: {
    get: function get() {
      return this.attrs.variant_id;
    },
    configurable: true,
    enumerable: true
  },
  product_id: {
    get: function get() {
      return this.attrs.product_id;
    },
    configurable: true,
    enumerable: true
  },
  image: {
    get: function get() {
      return this.attrs.image;
    },
    configurable: true,
    enumerable: true
  },
  title: {
    get: function get() {
      return this.attrs.title;
    },
    configurable: true,
    enumerable: true
  },
  quantity: {
    get: function get() {
      return this.attrs.quantity;
    },
    set: function set(value) {
      var parsedValue = parseInt(value, 10);

      if (parsedValue < 0) {
        throw new Error('Quantities must be positive');
      } else if (parsedValue !== parseFloat(value)) {
        /* incidentally, this covers all NaN values, because NaN !== Nan */
        throw new Error('Quantities must be whole numbers');
      }

      this.attrs.quantity = parsedValue;

      return this.attrs.quantity;
    },
    configurable: true,
    enumerable: true
  },
  properties: {
    get: function get() {
      return this.attrs.properties || {};
    },
    set: function set(value) {
      this.attrs.properties = value || {};

      return value;
    },
    configurable: true,
    enumerable: true
  },
  variant_title: {
    get: function get() {
      return this.attrs.variant_title;
    },
    configurable: true,
    enumerable: true
  },
  price: {
    get: function get() {
      return this.attrs.price;
    },
    configurable: true,
    enumerable: true
  },
  compare_at_price: {
    get: function get() {
      return this.attrs.compare_at_price;
    },
    configurable: true,
    enumerable: true
  },
  line_price: {
    get: function get() {
      return (this.quantity * parseFloat(this.price)).toFixed(2);
    },
    configurable: true,
    enumerable: true
  },
  grams: {
    get: function get() {
      return this.attrs.grams;
    },
    configurable: true,
    enumerable: true
  }
}));

exports['default'] = CartLineItem;
module.exports = exports['default'];